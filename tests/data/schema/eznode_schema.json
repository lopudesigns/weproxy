{
  "id": "https://schema.steemitdev/blockchain/block.json",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "Ezchain Blockchain Schema",
  "type": "object",
  "properties": {
    "transaction_merkle_root": {
      "type": "string"
    },
    "witness_signature": {
      "type": "string"
    },
    "witness": {
      "$ref": "#/definitions/account_name_type"
    },
    "previous": {
      "type": "string"
    },
    "timestamp": {
      "$ref": "#/definitions/time_point_sec"
    },
    "extensions": {
      "$ref": "#/definitions/extensions_type"
    },
    "transactions": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/transaction"
      }
    }
  },
  "definitions": {
    "account_authority_map": {
      "type": "object",
      "properties": {
        "public_key_type": {
          "ref": "#/definitions/public_key_type"
        },
        "weight_type": {
          "ref": "#/definitions/weight_type"
        }
      }
    },
    "accountCreate": {
      "type": "object",
      "title": "accountCreate",
      "required": [
        "active",
        "creator",
        "fee",
        "json",
        "memoKey",
        "newAccountName",
        "owner",
        "posting"
      ],
      "properties": {
        "json": {
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/asset"
        },
        "newAccountName": {
          "$ref": "#/definitions/account_name_type"
        },
        "active": {
          "$ref": "#/definitions/authority"
        },
        "memoKey": {
          "$ref": "#/definitions/public_key_type"
        },
        "creator": {
          "$ref": "#/definitions/account_name_type"
        },
        "owner": {
          "$ref": "#/definitions/authority"
        },
        "posting": {
          "$ref": "#/definitions/authority"
        }
      }
    },
    "accountCreateWithDelegation": {
      "type": "object",
      "title": "accountCreateWithDelegation",
      "required": [
        "active",
        "creator",
        "delegation",
        "extensions",
        "fee",
        "json",
        "memoKey",
        "newAccountName",
        "owner",
        "posting"
      ],
      "properties": {
        "json": {
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/asset"
        },
        "newAccountName": {
          "$ref": "#/definitions/account_name_type"
        },
        "creator": {
          "$ref": "#/definitions/account_name_type"
        },
        "posting": {
          "$ref": "#/definitions/authority"
        },
        "memoKey": {
          "$ref": "#/definitions/public_key_type"
        },
        "active": {
          "$ref": "#/definitions/authority"
        },
        "extensions": {
          "$ref": "#/definitions/extensions_type"
        },
        "owner": {
          "$ref": "#/definitions/authority"
        },
        "delegation": {
          "$ref": "#/definitions/asset"
        }
      }
    },
    "account_name_type": {
      "description": "https://github.com/eziranetwork/ezira/blob/master/libraries/protocol/include/eznode/protocol/config.hpp#L207",
      "type": "string",
      "minLength": 3,
      "maxLength": 16
    },
    "accountUpdate": {
      "type": "object",
      "title": "accountUpdate",
      "required": [
        "account",
        "json",
        "memoKey"
      ],
      "properties": {
        "memoKey": {
          "$ref": "#/definitions/public_key_type"
        },
        "active": {
          "$ref": "#/definitions/authority"
        },
        "json": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "owner": {
          "$ref": "#/definitions/authority"
        },
        "posting": {
          "$ref": "#/definitions/authority"
        }
      }
    },
    "account_witness_proxy": {
      "type": "object",
      "title": "account_witness_proxy",
      "required": [
        "account",
        "proxy"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "proxy": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "accountWitnessVote": {
      "type": "object",
      "title": "accountWitnessVote",
      "required": [
        "account",
        "approve",
        "witness"
      ],
      "properties": {
        "approve": {
          "type": "boolean"
        },
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "witness": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "All accounts with a ESCOR can vote for or against any witness. If a proxy is specified then all existing votes are removed."
    },
    "asset": {
      "type": "string",
      "pattern": "\\d+(\\.\\d+)?\\s+(ECO|EUSD|ESCOR)+"
    },
    "authority": {
      "type": "object",
      "properties": {
        "weight_threshold": {
          "$ref": "#/definitions/uint32_t"
        },
        "key_auths": {
          "type": "array",
          "items": {
            "ref": "#/definitions/key_authority_map"
          }
        },
        "account_auths": {
          "type": "array",
          "items": {
            "ref": "#/definitions/account_authority_map"
          }
        }
      }
    },
    "block_id_type": {
      "$ref": "#/definitions/uint32_t"
    },
    "cancelTransferFromSavings": {
      "type": "object",
      "title": "cancelTransferFromSavings",
      "required": [
        "from",
        "request_id"
      ],
      "properties": {
        "request_id": {
          "$ref": "#/definitions/uint32_t"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "challenge_authority": {
      "type": "object",
      "title": "challenge_authority",
      "required": [
        "challenged",
        "challenger",
        "require_owner"
      ],
      "properties": {
        "require_owner": {
          "type": "boolean"
        },
        "challenged": {
          "$ref": "#/definitions/account_name_type"
        },
        "challenger": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "change_recoveryAccount": {
      "type": "object",
      "title": "change_recoveryAccount",
      "required": [
        "accountToRecover",
        "extensions",
        "new_recoveryAccount"
      ],
      "properties": {
        "new_recoveryAccount": {
          "$ref": "#/definitions/account_name_type",
          "description": "The account that would be recovered in case of compromise"
        },
        "extensions": {
          "$ref": "#/definitions/extensions_type",
          "description": "The account that creates the recover request"
        },
        "accountToRecover": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "Each account lists another account as their recovery account. The recovery account has the ability to create account_recovery_requests for the account to recover. An account can change their recovery account at any time with a 30 day delay. This delay is to prevent an attacker from changing the recovery account to a malicious account during an attack. These 30 days match the 30 days that an owner authority is valid for recovery purposes. On account creation the recovery account is set either to the creator of the account (The account that pays the creation fee and is a signer on the transaction) or to the empty string if the account was mined. An account with no recovery has the top voted witness as a recovery account, at the time the recover request is created. Note: This does mean the effective recovery account of an account with no listed recovery account can change at any time as witness vote weights. The top voted witness is explicitly the most trusted witness according to stake."
    },
    "claimRewardBalance": {
      "type": "object",
      "title": "claimRewardBalance",
      "required": [
        "account",
        "EUSDreward",
        "ECOreward",
        "ESCORreward"
      ],
      "properties": {
        "ECOreward": {
          "$ref": "#/definitions/asset"
        },
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "EUSDreward": {
          "$ref": "#/definitions/asset"
        },
        "ESCORreward": {
          "$ref": "#/definitions/asset"
        }
      }
    },
    "comment": {
      "type": "object",
      "title": "comment",
      "required": [
        "author",
        "body",
        "json",
        "parent_author",
        "parent_permlink",
        "permlink",
        "title"
      ],
      "properties": {
        "body": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/account_name_type"
        },
        "parent_author": {
          "type": "string"
        },
        "parent_permlink": {
          "type": "string"
        },
        "json": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "permlink": {
          "type": "string"
        }
      }
    },
    "comment_options": {
      "type": "object",
      "title": "comment_options",
      "required": [
        "allow_curationRewards",
        "allow_votes",
        "author",
        "extensions",
        "max_accepted_payout",
        "percent_EUSD",
        "permlink"
      ],
      "properties": {
        "percent_EUSD": {
          "$ref": "#/definitions/uint16_t",
          "description": "EUSD value of the maximum payout this post will receive"
        },
        "allow_votes": {
          "description": "the percent of EUSDs to key, unkept amounts will be received as ESCOR",
          "type": "boolean"
        },
        "author": {
          "$ref": "#/definitions/account_name_type"
        },
        "max_accepted_payout": {
          "$ref": "#/definitions/asset"
        },
        "allow_curationRewards": {
          "description": "allows a post to receive votes;",
          "type": "boolean"
        },
        "extensions": {
          "$ref": "#/definitions/eznode::protocol::comment_options_extensions_type",
          "description": "allows voters to recieve curation rewards. Rewards return to reward fund."
        },
        "permlink": {
          "type": "string"
        }
      },
      "description": "Authors of posts may not want all of the benefits that come from creating a post. This  operation allows authors to update properties associated with their post.  The max_accepted_payout may be decreased, but never increased.  The percent_EUSD may be decreased, but never increased"
    },
    "convert": {
      "type": "object",
      "title": "convert",
      "required": [
        "amount",
        "owner",
        "requestid"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/asset"
        },
        "owner": {
          "$ref": "#/definitions/account_name_type"
        },
        "requestid": {
          "$ref": "#/definitions/uint32_t"
        }
      },
      "description": "This operation instructs the blockchain to start a conversion between ECO and EUSD,  The funds are deposited after CONVERSION_DELAY"
    },
    "custom": {
      "type": "object",
      "title": "custom",
      "required": [
        "data",
        "id",
        "required_auths"
      ],
      "properties": {
        "required_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        },
        "id": {
          "$ref": "#/definitions/uint16_t"
        },
        "data": {
          "type": "string"
        }
      },
      "description": "@brief provides a generic way to add higher level protocols on top of witness consensus @ingroup operations There is no validation for this operation other than that required auths are valid"
    },
    "custom_binary": {
      "type": "object",
      "title": "custom_binary",
      "required": [
        "data",
        "id",
        "required_active_auths",
        "required_auths",
        "required_owner_auths",
        "required_posting_auths"
      ],
      "properties": {
        "required_auths": {
          "items": {
            "$ref": "#/definitions/authority"
          },
          "type": "array"
        },
        "required_active_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        },
        "required_posting_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        },
        "data": {
          "description": "must be less than 32 characters long",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "required_owner_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        }
      }
    },
    "customJson": {
      "type": "object",
      "title": "customJson",
      "required": [
        "id",
        "json",
        "required_auths",
        "required_posting_auths"
      ],
      "properties": {
        "json": {
          "description": "must be less than 32 characters long",
          "type": "string"
        },
        "required_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "required_posting_auths": {
          "items": {
            "$ref": "#/definitions/account_name_type"
          },
          "type": "array"
        }
      },
      "description": "serves the same purpose as custom_operation but also supports required posting authorities. Unlike custom_operation, this operation is designed to be human readable/developer friendly."
    },
    "decline_voting_rights": {
      "type": "object",
      "title": "decline_voting_rights",
      "required": [
        "account",
        "decline"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "decline": {
          "type": "boolean"
        }
      }
    },
    "delegateESCOR": {
      "type": "object",
      "title": "delegateESCOR",
      "required": [
        "delegatee",
        "delegator",
        "ESCOR"
      ],
      "properties": {
        "delegator": {
          "$ref": "#/definitions/account_name_type"
        },
        "delegatee": {
          "$ref": "#/definitions/account_name_type",
          "description": "The account delegating ESCOR"
        },
        "ESCOR": {
          "$ref": "#/definitions/asset",
          "description": "The account receiving ESCOR"
        }
      },
      "description": "Delegate ESCOR from one account to the other. The ESCOR are still owned by the original account, but content voting rights and bandwidth allocation are transferred to the receiving account. This sets the delegation to `ESCOR`, increasing it or decreasing it as needed. (i.e. a delegation of 0 removes the delegation) When a delegation is removed the ESCOR are placed in limbo for a week to prevent a satoshi of ESCOR from voting on the same content twice."
    },
    "deleteComment": {
      "type": "object",
      "title": "deleteComment",
      "required": [
        "author",
        "permlink"
      ],
      "properties": {
        "permlink": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "escrow_approve": {
      "type": "object",
      "title": "escrow_approve",
      "required": [
        "agent",
        "approve",
        "escrow_id",
        "from",
        "to",
        "who"
      ],
      "properties": {
        "escrow_id": {
          "$ref": "#/definitions/uint32_t"
        },
        "approve": {
          "type": "boolean"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "who": {
          "$ref": "#/definitions/account_name_type"
        },
        "agent": {
          "$ref": "#/definitions/account_name_type"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "The agent and to accounts must approve an escrow transaction for it to be valid on  the blockchain. Once a part approves the escrow, the cannot revoke their approval.  Subsequent escrow approve operations, regardless of the approval, will be rejected."
    },
    "escrow_dispute": {
      "type": "object",
      "title": "escrow_dispute",
      "required": [
        "agent",
        "escrow_id",
        "from",
        "to",
        "who"
      ],
      "properties": {
        "escrow_id": {
          "$ref": "#/definitions/uint32_t"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "who": {
          "$ref": "#/definitions/account_name_type"
        },
        "agent": {
          "$ref": "#/definitions/account_name_type"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "If either the sender or receiver of an escrow payment has an issue, they can  raise it for dispute. Once a payment is in dispute, the agent has authority over  who gets what."
    },
    "escrow_release": {
      "type": "object",
      "title": "escrow_release",
      "required": [
        "agent",
        "escrow_id",
        "from",
        "receiver",
        "EUSDamount",
        "ECOamount",
        "to",
        "who"
      ],
      "properties": {
        "escrow_id": {
          "$ref": "#/definitions/uint32_t",
          "description": "the account that should receive funds (might be from, might be to)"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "receiver": {
          "$ref": "#/definitions/account_name_type",
          "description": "the account that is attempting to release the funds, determines valid 'receiver'"
        },
        "who": {
          "$ref": "#/definitions/account_name_type"
        },
        "agent": {
          "$ref": "#/definitions/account_name_type",
          "description": "the original 'to'"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        },
        "ECOamount": {
          "$ref": "#/definitions/asset",
          "description": "the amount of EUSD to release"
        },
        "EUSDamount": {
          "$ref": "#/definitions/asset"
        }
      },
      "description": "This operation can be used by anyone associated with the escrow transfer to  release funds if they have permission.  The permission scheme is as follows:  If there is no dispute and escrow has not expired, either party can release funds to the other.  If escrow expires and there is no dispute, either party can release funds to either party.  If there is a dispute regardless of expiration, the agent can release funds to either party     following whichever agreement was in place between the parties."
    },
    "escrow_transfer": {
      "type": "object",
      "title": "escrow_transfer",
      "required": [
        "agent",
        "escrow_expiration",
        "escrow_id",
        "fee",
        "from",
        "json",
        "ratification_deadline",
        "EUSDamount",
        "ECOamount",
        "to"
      ],
      "properties": {
        "escrow_id": {
          "$ref": "#/definitions/uint32_t"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "agent": {
          "$ref": "#/definitions/account_name_type"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        },
        "ratification_deadline": {
          "$ref": "#/definitions/time_point_sec"
        },
        "escrow_expiration": {
          "$ref": "#/definitions/time_point_sec"
        },
        "json": {
          "type": "string"
        },
        "fee": {
          "$ref": "#/definitions/asset"
        },
        "ECOamount": {
          "$ref": "#/definitions/asset"
        },
        "EUSDamount": {
          "$ref": "#/definitions/asset"
        }
      },
      "description": "The purpose of this operation is to enable someone to send money contingently to  another individual. The funds leave the from account and go into a temporary balance  where they are held until from releases it to to or to refunds it to from.  In the event of a dispute the agent can divide the funds between the to/from account.  Disputes can be raised any time before or on the dispute deadline time, after the escrow  has been approved by all parties.  This operation only creates a proposed escrow transfer. Both the agent and to must  agree to the terms of the arrangement by approving the escrow.  The escrow agent is paid the fee on approval of all parties. It is up to the escrow agent  to determine the fee.  Escrow transactions are uniquely identified by 'from' and 'escrow_id', the 'escrow_id' is defined  by the sender."
    },
    "extensions_type": {
      "type": "array"
    },
    "feed_publish": {
      "type": "object",
      "title": "feed_publish",
      "required": [
        "exchange_rate",
        "publisher"
      ],
      "properties": {
        "exchange_rate": {
          "$ref": "#/definitions/price"
        },
        "publisher": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "Feeds can only be published by the top N witnesses which are included in every round and are  used to define the exchange rate between eCoin and the dollar."
    },
    "int16_t": {
      "max": 32767,
      "min": 32768,
      "type": "integer"
    },
    "key_authority_map": {
      "type": "object",
      "properties": {
        "weight_type": {
          "ref": "#/definitions/weight_type"
        },
        "account_name_type": {
          "ref": "#/definitions/account_name_type"
        }
      }
    },
    "limit_order_cancel": {
      "type": "object",
      "title": "limit_order_cancel",
      "required": [
        "orderid",
        "owner"
      ],
      "properties": {
        "orderid": {
          "$ref": "#/definitions/uint32_t"
        },
        "owner": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "Cancels an order and returns the balance to owner."
    },
    "limit_order_create": {
      "type": "object",
      "title": "limit_order_create",
      "required": [
        "amount_to_sell",
        "expiration",
        "fill_or_kill",
        "min_to_receive",
        "orderid",
        "owner"
      ],
      "properties": {
        "orderid": {
          "$ref": "#/definitions/uint32_t"
        },
        "min_to_receive": {
          "$ref": "#/definitions/asset"
        },
        "expiration": {
          "$ref": "#/definitions/time_point_sec"
        },
        "owner": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount_to_sell": {
          "$ref": "#/definitions/asset",
          "description": "an ID assigned by owner, must be unique"
        },
        "fill_or_kill": {
          "type": "boolean"
        }
      },
      "description": "This operation creates a limit order and matches it against existing open orders."
    },
    "limit_order_create2": {
      "type": "object",
      "title": "limit_order_create2",
      "required": [
        "amount_to_sell",
        "exchange_rate",
        "expiration",
        "fill_or_kill",
        "orderid",
        "owner"
      ],
      "properties": {
        "orderid": {
          "$ref": "#/definitions/uint32_t"
        },
        "expiration": {
          "$ref": "#/definitions/time_point_sec"
        },
        "exchange_rate": {
          "$ref": "#/definitions/price"
        },
        "owner": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount_to_sell": {
          "$ref": "#/definitions/asset",
          "description": "an ID assigned by owner, must be unique"
        },
        "fill_or_kill": {
          "type": "boolean"
        }
      },
      "description": "This operation is identical to limit_order_create except it serializes the price rather  than calculating it from other fields."
    },
    "operation": {
      "oneOf": [
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "accountCreate"
              ]
            },
            {
              "$ref": "#/definitions/accountCreate"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "accountCreateWithDelegation"
              ]
            },
            {
              "$ref": "#/definitions/accountCreateWithDelegation"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "accountUpdate"
              ]
            },
            {
              "$ref": "#/definitions/accountUpdate"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "account_witness_proxy"
              ]
            },
            {
              "$ref": "#/definitions/account_witness_proxy"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "accountWitnessVote"
              ]
            },
            {
              "$ref": "#/definitions/accountWitnessVote"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "cancelTransferFromSavings"
              ]
            },
            {
              "$ref": "#/definitions/cancelTransferFromSavings"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "challenge_authority"
              ]
            },
            {
              "$ref": "#/definitions/challenge_authority"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "change_recoveryAccount"
              ]
            },
            {
              "$ref": "#/definitions/change_recoveryAccount"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "claimRewardBalance"
              ]
            },
            {
              "$ref": "#/definitions/claimRewardBalance"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "comment"
              ]
            },
            {
              "$ref": "#/definitions/comment"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "comment_options"
              ]
            },
            {
              "$ref": "#/definitions/comment_options"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "convert"
              ]
            },
            {
              "$ref": "#/definitions/convert"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "custom"
              ]
            },
            {
              "$ref": "#/definitions/custom"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "custom_binary"
              ]
            },
            {
              "$ref": "#/definitions/custom_binary"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "customJson"
              ]
            },
            {
              "$ref": "#/definitions/customJson"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "decline_voting_rights"
              ]
            },
            {
              "$ref": "#/definitions/decline_voting_rights"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "delegateESCOR"
              ]
            },
            {
              "$ref": "#/definitions/delegateESCOR"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "deleteComment"
              ]
            },
            {
              "$ref": "#/definitions/deleteComment"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "escrow_approve"
              ]
            },
            {
              "$ref": "#/definitions/escrow_approve"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "escrow_dispute"
              ]
            },
            {
              "$ref": "#/definitions/escrow_dispute"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "escrow_release"
              ]
            },
            {
              "$ref": "#/definitions/escrow_release"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "escrow_transfer"
              ]
            },
            {
              "$ref": "#/definitions/escrow_transfer"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "feed_publish"
              ]
            },
            {
              "$ref": "#/definitions/feed_publish"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "limit_order_cancel"
              ]
            },
            {
              "$ref": "#/definitions/limit_order_cancel"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "limit_order_create"
              ]
            },
            {
              "$ref": "#/definitions/limit_order_create"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "limit_order_create2"
              ]
            },
            {
              "$ref": "#/definitions/limit_order_create2"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "pow"
              ]
            },
            {
              "$ref": "#/definitions/pow"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "pow2"
              ]
            },
            {
              "$ref": "#/definitions/pow2"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "prove_authority"
              ]
            },
            {
              "$ref": "#/definitions/prove_authority"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "recover_account"
              ]
            },
            {
              "$ref": "#/definitions/recover_account"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "report_over_production"
              ]
            },
            {
              "$ref": "#/definitions/report_over_production"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "request_account_recovery"
              ]
            },
            {
              "$ref": "#/definitions/request_account_recovery"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "reset_account"
              ]
            },
            {
              "$ref": "#/definitions/reset_account"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "set_reset_account"
              ]
            },
            {
              "$ref": "#/definitions/set_reset_account"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "setWithdrawESCORasECOroute"
              ]
            },
            {
              "$ref": "#/definitions/setWithdrawESCORasECOroute"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "transfer"
              ]
            },
            {
              "$ref": "#/definitions/transfer"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "transferFromSavings"
              ]
            },
            {
              "$ref": "#/definitions/transferFromSavings"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "transferToSavings"
              ]
            },
            {
              "$ref": "#/definitions/transferToSavings"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "transferECOtoESCORfund"
              ]
            },
            {
              "$ref": "#/definitions/transferECOtoESCORfund"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "vote"
              ]
            },
            {
              "$ref": "#/definitions/vote"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "withdrawESCOR"
              ]
            },
            {
              "$ref": "#/definitions/withdrawESCOR"
            }
          ]
        },
        {
          "type": "array",
          "items": [
            {
              "type": "string",
              "enum": [
                "witness_update"
              ]
            },
            {
              "$ref": "#/definitions/witness_update"
            }
          ]
        }
      ]
    },
    "operation_types": {
      "type": "string",
      "enum": [
        "accountCreate",
        "accountCreateWithDelegation",
        "accountUpdate",
        "account_witness_proxy",
        "accountWitnessVote",
        "cancelTransferFromSavings",
        "challenge_authority",
        "change_recoveryAccount",
        "claimRewardBalance",
        "comment",
        "comment_options",
        "convert",
        "custom",
        "custom_binary",
        "customJson",
        "decline_voting_rights",
        "delegateESCOR",
        "deleteComment",
        "escrow_approve",
        "escrow_dispute",
        "escrow_release",
        "escrow_transfer",
        "feed_publish",
        "limit_order_cancel",
        "limit_order_create",
        "limit_order_create2",
        "pow",
        "pow2",
        "prove_authority",
        "recover_account",
        "report_over_production",
        "request_account_recovery",
        "reset_account",
        "set_reset_account",
        "setWithdrawESCORasECOroute",
        "transfer",
        "transferFromSavings",
        "transferToSavings",
        "transferECOtoESCORfund",
        "vote",
        "withdrawESCOR",
        "witness_update"
      ]
    },
    "pow": {
      "type": "object",
      "title": "pow",
      "required": [
        "block_id",
        "nonce",
        "props",
        "work",
        "worker_account"
      ],
      "properties": {
        "worker_account": {
          "$ref": "#/definitions/account_name_type"
        },
        "block_id": {
          "$ref": "#/definitions/block_id_type"
        },
        "work": {
          "$ref": "#/definitions/eznode::protocol::pow"
        },
        "nonce": {
          "$ref": "#/definitions/uint64_t"
        },
        "props": {
          "$ref": "#/definitions/eznode::protocol::chain_properties"
        }
      }
    },
    "pow2": {
      "type": "object",
      "title": "pow2",
      "required": [
        "props",
        "work"
      ],
      "properties": {
        "new_owner_key": {
          "$ref": "#/definitions/public_key_type"
        },
        "work": {
          "$ref": "#/definitions/eznode::protocol::pow2_work"
        },
        "props": {
          "$ref": "#/definitions/eznode::protocol::chain_properties"
        }
      }
    },
    "price": {
      "type": "object",
      "properties": {
        "quote": {
          "$ref": "#/definitions/asset"
        },
        "base": {
          "$ref": "#/definitions/asset"
        }
      }
    },
    "prove_authority": {
      "type": "object",
      "title": "prove_authority",
      "required": [
        "challenged",
        "require_owner"
      ],
      "properties": {
        "require_owner": {
          "type": "boolean"
        },
        "challenged": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "public_key_type": {
      "type": "string",
      "minLength": 10,
      "maxLength": 100
    },
    "recover_account": {
      "type": "object",
      "title": "recover_account",
      "required": [
        "accountToRecover",
        "extensions",
        "new_owner_authority",
        "recent_owner_authority"
      ],
      "properties": {
        "recent_owner_authority": {
          "$ref": "#/definitions/authority",
          "description": "The new owner authority as specified in the request account recovery operation."
        },
        "extensions": {
          "$ref": "#/definitions/extensions_type",
          "description": "A previous owner authority that the account holder will use to prove past ownership of the account to be recovered."
        },
        "new_owner_authority": {
          "$ref": "#/definitions/authority",
          "description": "The account to be recovered"
        },
        "accountToRecover": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "Recover an account to a new authority using a previous authority and verification of the recovery account as proof of identity. This operation can only succeed if there was a recovery request sent by the account's recover account. In order to recover the account, the account holder must provide proof of past ownership and proof of identity to the recovery account. Being able to satisfy an owner authority that was used in the past 30 days is sufficient to prove past ownership. The get_owner_history function in the database API returns past owner authorities that are valid for account recovery. Proving identity is an off chain contract between the account holder and the recovery account. The recovery request contains a new authority which must be satisfied by the account holder to regain control. The actual process of verifying authority may become complicated, but that is an application level concern, not a blockchain concern. This operation requires both the past and future owner authorities in the operation because neither of them can be derived from the current chain state. The operation must be signed by keys that satisfy both the new owner authority and the recent owner authority. Failing either fails the operation entirely. If a recovery request was made inadvertantly, the account holder should contact the recovery account to have the request deleted. The two setp combination of the account recovery request and recover is safe because the recovery account never has access to secrets of the account to recover. They simply act as an on chain endorsement of off chain identity. In other systems, a fork would be required to enforce such off chain state. Additionally, an account cannot be permanently recovered to the wrong account. While any owner authority from the past 30 days can be used, including a compromised authority, the account can be continually recovered until the recovery account is confident a combination of uncompromised authorities were used to recover the account. The actual process of verifying authority may become complicated, but that is an application level concern, not the blockchain's concern."
    },
    "report_over_production": {
      "type": "object",
      "title": "report_over_production",
      "required": [
        "first_block",
        "reporter",
        "second_block"
      ],
      "properties": {
        "reporter": {
          "$ref": "#/definitions/account_name_type"
        },
        "first_block": {
          "$ref": "#/definitions/signed_block_header"
        },
        "second_block": {
          "$ref": "#/definitions/signed_block_header"
        }
      },
      "description": "This operation is used to report a miner who signs two blocks at the same time. To be valid, the violation must be reported within MAX_WITNESSES blocks of the head block (1 round) and the producer must be in the ACTIVE witness set. Users not in the ACTIVE witness set should not have to worry about their key getting compromised and being used to produced multiple blocks so the attacker can report it and steel their ESCOR The result of the operation is to transfer the full ESCOR balance of the block producer to the reporter."
    },
    "request_account_recovery": {
      "type": "object",
      "title": "request_account_recovery",
      "required": [
        "accountToRecover",
        "extensions",
        "new_owner_authority",
        "recoveryAccount"
      ],
      "properties": {
        "new_owner_authority": {
          "$ref": "#/definitions/authority",
          "description": "The account to recover. This is likely due to a compromised owner authority."
        },
        "extensions": {
          "$ref": "#/definitions/extensions_type",
          "description": "The new owner authority the account to recover wishes to have. This is secret\n///< known by the account to recover and will be confirmed in a recover_account_operation"
        },
        "recoveryAccount": {
          "$ref": "#/definitions/account_name_type"
        },
        "accountToRecover": {
          "$ref": "#/definitions/account_name_type",
          "description": "The recovery account is listed as the recovery account on the account to recover."
        }
      },
      "description": "All account recovery requests come from a listed recovery account. This is secure based on the assumption that only a trusted account should be a recovery account. It is the responsibility of the recovery account to verify the identity of the account holder of the account to recover by whichever means they have agreed upon. The blockchain assumes identity has been verified when this operation is broadcast. This operation creates an account recovery request which the account to recover has 24 hours to respond to before the request expires and is invalidated. There can only be one active recovery request per account at any one time. Pushing this operation for an account to recover when it already has an active request will either update the request to a new new owner authority and extend the request expiration to 24 hours from the current head block time or it will delete the request. To cancel a request, simply set the weight threshold of the new owner authority to 0, making it an open authority. Additionally, the new owner authority must be satisfiable. In other words, the sum of the key weights must be greater than or equal to the weight threshold. This operation only needs to be signed by the the recovery account. The account to recover confirms its identity to the blockchain in the recover account operation."
    },
    "reset_account": {
      "type": "object",
      "title": "reset_account",
      "required": [
        "account_to_reset",
        "new_owner_authority",
        "reset_account"
      ],
      "properties": {
        "account_to_reset": {
          "$ref": "#/definitions/account_name_type"
        },
        "new_owner_authority": {
          "$ref": "#/definitions/authority"
        },
        "reset_account": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "This operation allows recovery_accoutn to change account_to_reset's owner authority to  new_owner_authority after 60 days of inactivity."
    },
    "set_reset_account": {
      "type": "object",
      "title": "set_reset_account",
      "required": [
        "account",
        "current_reset_account",
        "reset_account"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "reset_account": {
          "$ref": "#/definitions/account_name_type"
        },
        "current_reset_account": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "This operation allows 'account' owner to control which account has the power to execute the 'reset_account_operation' after 60 days."
    },
    "setWithdrawESCORasECOroute": {
      "type": "object",
      "title": "setWithdrawESCORasECOroute",
      "required": [
        "autoESCOR",
        "from_account",
        "percent",
        "to_account"
      ],
      "properties": {
        "autoESCOR": {
          "type": "boolean"
        },
        "from_account": {
          "$ref": "#/definitions/account_name_type"
        },
        "percent": {
          "$ref": "#/definitions/uint16_t"
        },
        "to_account": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "Allows an account to setup an ESCOR withdraw but with the additional request for the funds to be transferred directly to another account's balance rather than the withdrawing account. In addition, those funds can be immediately scored again, circumventing the conversion from ESCOR to eCoin and back, guaranteeing they maintain their value."
    },
    "signed_block_header": {
      "type": "string"
    },
    "eznode::protocol::chain_properties": {
      "type": "object",
      "properties": {
        "EUSD_interest_rate": {
          "type": "integer"
        },
        "account_creation_fee": {
          "$ref": "#/definitions/asset"
        },
        "maximum_block_size": {
          "type": "integer"
        }
      }
    },
    "eznode::protocol::comment_options_extensions_type": {
      "type": "array"
    },
    "eznode::protocol::pow": {
      "type": "object",
      "properties": {
        "worker": {
          "type": "string"
        },
        "signature": {
          "type": "string"
        },
        "work": {
          "type": "string"
        },
        "input": {
          "type": "string"
        }
      }
    },
    "eznode::protocol::pow2_work": {
      "type": "array"
    },
    "time_point_sec": {
      "type": "string",
      "format": "date-time"
    },
    "transaction": {
      "type": "object",
      "required": [
        "signatures",
        "extensions",
        "expiration",
        "ref_block_num",
        "ref_block_prefix",
        "operations"
      ],
      "properties": {
        "signatures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ref_block_num": {
          "type": "integer"
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operation"
          }
        },
        "expiration": {
          "$ref": "#/definitions/time_point_sec"
        },
        "extensions": {
          "$ref": "#/definitions/extensions_type"
        },
        "ref_block_prefix": {
          "type": "integer"
        }
      }
    },
    "transfer": {
      "type": "object",
      "title": "transfer",
      "required": [
        "amount",
        "from",
        "memo",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount": {
          "$ref": "#/definitions/asset",
          "description": "The amount of asset to transfer from @ref from to @ref to"
        },
        "memo": {
          "description": "The memo is plain-text, any encryption on the memo is up to\n/// a higher level protocol.",
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/account_name_type",
          "description": "Account to transfer asset to"
        }
      },
      "description": "@ingroup operations @brief Transfers ECO from one account to another."
    },
    "transferFromSavings": {
      "type": "object",
      "title": "transferFromSavings",
      "required": [
        "amount",
        "from",
        "memo",
        "request_id",
        "to"
      ],
      "properties": {
        "request_id": {
          "$ref": "#/definitions/uint32_t"
        },
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount": {
          "$ref": "#/definitions/asset"
        },
        "memo": {
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "transferToSavings": {
      "type": "object",
      "title": "transferToSavings",
      "required": [
        "amount",
        "from",
        "memo",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount": {
          "$ref": "#/definitions/asset"
        },
        "memo": {
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        }
      }
    },
    "transferECOtoESCORfund": {
      "type": "object",
      "title": "transferECOtoESCORfund",
      "required": [
        "amount",
        "from",
        "to"
      ],
      "properties": {
        "from": {
          "$ref": "#/definitions/account_name_type"
        },
        "amount": {
          "$ref": "#/definitions/asset",
          "description": "if null, then same as from"
        },
        "to": {
          "$ref": "#/definitions/account_name_type"
        }
      },
      "description": "This operation converts ECO into ESCOR (ESCOR) at  the current exchange rate. With this operation it is possible to  give another account ESCOR so that faucets can  pre-fund new accounts with ESCOR."
    },
    "uint16_t": {
      "max": 65535,
      "min": 0,
      "type": "integer"
    },
    "uint32_t": {
      "max": 4294967295,
      "min": 0,
      "type": "integer"
    },
    "uint64_t": {
      "min": 0,
      "type": "integer"
    },
    "vote": {
      "type": "object",
      "title": "vote",
      "required": [
        "author",
        "permlink",
        "voter",
        "weight"
      ],
      "properties": {
        "permlink": {
          "type": "string"
        },
        "voter": {
          "$ref": "#/definitions/account_name_type"
        },
        "author": {
          "$ref": "#/definitions/account_name_type"
        },
        "weight": {
          "$ref": "#/definitions/int16_t"
        }
      }
    },
    "withdrawESCOR": {
      "type": "object",
      "title": "withdrawESCOR",
      "required": [
        "account",
        "ESCOR"
      ],
      "properties": {
        "account": {
          "$ref": "#/definitions/account_name_type"
        },
        "ESCOR": {
          "$ref": "#/definitions/asset"
        }
      },
      "description": "At any given point in time an account can be withdrawing from their ESCOR. A user may change the number of ESCOR they wish to cash out at any time between 0 and their total ESCOR. After applying this operation, ESCOR will be withdrawn at a rate of ESCOR/104 per week for two years starting one week after this operation is included in the blockchain. This operation is not valid if the user has no ESCOR."
    },
    "witness_update": {
      "type": "object",
      "title": "witness_update",
      "required": [
        "block_signing_key",
        "fee",
        "owner",
        "props",
        "url"
      ],
      "properties": {
        "url": {
          "type": "string"
        },
        "props": {
          "$ref": "#/definitions/eznode::protocol::chain_properties"
        },
        "owner": {
          "$ref": "#/definitions/account_name_type"
        },
        "fee": {
          "$ref": "#/definitions/asset"
        },
        "block_signing_key": {
          "$ref": "#/definitions/public_key_type"
        }
      },
      "description": "Users who wish to become a witness must pay a fee acceptable to  the current witnesses to apply for the position and allow voting  to begin.  If the owner isn't a witness they will become a witness.  Witnesses  are charged a fee equal to 1 weeks worth of witness pay which in  turn is derived from the current share supply.  The fee is  only applied if the owner is not already a witness.  If the block_signing_key is null then the witness is removed from  contention.  The network will pick the top 21 witnesses for  producing blocks."
    }
  }
}
